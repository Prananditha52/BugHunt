/*
 * This file was automatically generated by EvoSuite
 * Sat Apr 16 19:25:39 GMT 2022
 */

package artbughunt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import artbughunt.AVLTree;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AVLTree_ESTest extends AVLTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      assertEquals((-1), aVLTree0.height());
      
      aVLTree0.insert(4489);
      aVLTree0.insert(1);
      aVLTree0.insert(911);
      aVLTree0.delete(911);
      aVLTree0.insert((-3310));
      aVLTree0.find((-3310));
      aVLTree0.insert((-3796));
      aVLTree0.insert(0);
      aVLTree0.delete(911);
      aVLTree0.insert((-3217));
      aVLTree0.insert(911);
      aVLTree0.insert((-901));
      aVLTree0.insert((-887));
      aVLTree0.delete((-3310));
      assertEquals(3, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = aVLTree0.height();
      assertEquals((-1), int0);
      
      aVLTree0.insert((-1));
      aVLTree0.height();
      aVLTree0.getRoot();
      aVLTree0.find(0);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = 2206;
      aVLTree0.insert(2206);
      // Undeclared exception!
      try { 
        aVLTree0.insert(2206);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("artbughunt.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(1630);
      assertNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1554);
      aVLTree0.height();
      aVLTree0.find(1554);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1827);
      AVLTree.Node aVLTree_Node0 = aVLTree0.find(1517);
      assertNull(aVLTree_Node0);
      
      int int0 = aVLTree0.getBalance((AVLTree.Node) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-1866));
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      assertNull(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(0);
      aVLTree0.insert((-2533));
      aVLTree0.delete((-3467));
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-1));
      aVLTree0.find(1);
      aVLTree0.insert(626);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(350);
      aVLTree0.delete(350);
      assertEquals((-1), aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-1806));
      aVLTree0.delete(0);
      aVLTree0.find(0);
      assertEquals(0, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      int int0 = 1546;
      aVLTree0.insert(1546);
      aVLTree0.delete(1546);
      aVLTree0.insert(1546);
      // Undeclared exception!
      try { 
        aVLTree0.insert(1546);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("artbughunt.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-1));
      aVLTree0.delete(0);
      AVLTree.Node aVLTree_Node0 = aVLTree0.find((-1));
      AVLTree.Node aVLTree_Node1 = aVLTree0.new Node((-414));
      aVLTree_Node0.left = aVLTree_Node1;
      aVLTree0.getBalance(aVLTree_Node0);
      // Undeclared exception!
      try { 
        aVLTree0.delete((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("artbughunt.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(1);
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.height();
      aVLTree0.insert(0);
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node1.height = 0;
      aVLTree0.getBalance(aVLTree_Node1);
      aVLTree0.find((-1));
      aVLTree0.insert((-1));
      aVLTree0.find(0);
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.delete(0);
      assertEquals(1, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(4489);
      aVLTree0.insert(1);
      aVLTree0.insert(911);
      aVLTree0.delete(911);
      aVLTree0.insert((-3310));
      aVLTree0.find((-3310));
      aVLTree0.insert((-3796));
      aVLTree0.insert(0);
      aVLTree0.delete(3008);
      aVLTree0.insert((-3225));
      aVLTree0.find((-3796));
      aVLTree0.insert(911);
      aVLTree0.insert((-901));
      aVLTree0.insert((-887));
      aVLTree0.delete((-3310));
      aVLTree0.find((-3796));
      assertEquals(3, aVLTree0.height());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.height();
      aVLTree0.insert((-1));
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree_Node0.height = 229;
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree_Node0.left = null;
      aVLTree0.delete(2358);
      aVLTree0.delete(1);
      aVLTree0.insert(0);
      aVLTree0.height();
      aVLTree_Node0.height = 0;
      aVLTree0.delete(0);
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node0.right = aVLTree_Node1;
      int int0 = 2233;
      // Undeclared exception!
      aVLTree0.find(2233);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-1125));
      aVLTree0.insert(1);
      aVLTree0.insert(911);
      aVLTree0.delete(911);
      aVLTree0.insert((-3310));
      aVLTree0.insert(91);
      aVLTree0.find((-3310));
      aVLTree0.insert((-3796));
      aVLTree0.insert(0);
      aVLTree0.delete((-1125));
      aVLTree0.delete(3008);
      aVLTree0.insert((-3225));
      aVLTree0.find((-3796));
      aVLTree0.insert(911);
      aVLTree0.insert((-901));
      aVLTree0.insert((-887));
      aVLTree0.delete((-3310));
      aVLTree0.find((-3796));
      // Undeclared exception!
      try { 
        aVLTree0.insert((-3796));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // duplicate Key!
         //
         verifyException("artbughunt.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete(0);
      aVLTree0.height();
      aVLTree0.insert((-1));
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree_Node0.height = 229;
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.insert(805);
      aVLTree_Node0.left = null;
      aVLTree0.delete(2358);
      aVLTree0.delete(1);
      aVLTree0.insert(0);
      aVLTree0.height();
      aVLTree_Node0.height = 2358;
      // Undeclared exception!
      try { 
        aVLTree0.delete(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("artbughunt.AVLTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.delete((-549));
      aVLTree0.insert(0);
      int int0 = aVLTree0.height();
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      int int1 = 3432;
      aVLTree0.delete(3432);
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node1.key = 0;
      int int2 = (-701);
      aVLTree_Node1.key = (-3874);
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree_Node1.left = aVLTree_Node0.right;
      aVLTree_Node1.right = aVLTree_Node0.right;
      aVLTree0.insert(int0);
      aVLTree_Node1.key = int1;
      aVLTree_Node0.right.key = int1;
      aVLTree_Node1.key = int2;
      aVLTree0.getBalance(aVLTree_Node1);
      aVLTree0.getBalance(aVLTree_Node0);
      int int3 = 0;
      AVLTree.Node aVLTree_Node2 = aVLTree0.find(int3);
      aVLTree0.getBalance(aVLTree_Node2);
      aVLTree0.find(int1);
      aVLTree0.height();
      aVLTree0.insert(aVLTree_Node0.right.key);
      aVLTree0.delete(aVLTree_Node1.key);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-1997));
      aVLTree0.delete(0);
      aVLTree0.delete((-1));
      aVLTree0.delete(0);
      aVLTree0.delete(0);
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-1));
      AVLTree.Node aVLTree_Node1 = aVLTree0.getRoot();
      aVLTree_Node0.right = aVLTree_Node1;
      aVLTree_Node0.left = aVLTree_Node1;
      aVLTree_Node0.right.key = (-1997);
      aVLTree0.insert(1);
      aVLTree_Node1.left = aVLTree_Node0.right;
      aVLTree0.insert(0);
      aVLTree0.getBalance(aVLTree_Node0);
      int int0 = aVLTree0.height();
      aVLTree0.height();
      aVLTree0.insert(481);
      aVLTree0.height();
      // Undeclared exception!
      try { 
        aVLTree0.delete(int0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-955));
      aVLTree0.insert((-1496));
      aVLTree0.insert(725);
      aVLTree0.insert(1625);
      aVLTree0.height();
      aVLTree0.getRoot();
      aVLTree0.insert(0);
      aVLTree0.height();
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node(1625);
      aVLTree_Node0.key = 218;
      aVLTree0.delete((-2556));
      aVLTree_Node0.key = (-1864);
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.delete((-1496));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert((-449));
      AVLTree.Node aVLTree_Node0 = aVLTree0.getRoot();
      aVLTree0.insert((-192));
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree0.insert(1);
      AVLTree.Node aVLTree_Node1 = aVLTree_Node0.left;
      aVLTree_Node0.left = null;
      aVLTree0.getBalance(aVLTree_Node0);
      aVLTree_Node0.key = (-192);
      aVLTree0.height();
      aVLTree0.getBalance(aVLTree_Node0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AVLTree aVLTree0 = new AVLTree();
      aVLTree0.insert(4489);
      aVLTree0.insert(1);
      aVLTree0.insert((-324));
      aVLTree0.delete((-324));
      aVLTree0.insert((-465));
      aVLTree0.find((-465));
      aVLTree0.insert((-3796));
      aVLTree0.insert(0);
      aVLTree0.delete(3008);
      aVLTree0.insert((-3217));
      aVLTree0.find((-3796));
      aVLTree0.insert((-324));
      aVLTree0.insert((-901));
      aVLTree0.insert((-887));
      aVLTree0.delete((-465));
      AVLTree.Node aVLTree_Node0 = aVLTree0.new Node((-465));
  }
}
